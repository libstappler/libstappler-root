#version 450
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 8, local_size_y = 8) in;

struct NoiseData {
	uvec2 seed;
	vec2 density;
};

layout (set = 0, binding = 0) uniform NoiseDataBuffer {
	NoiseData noiseData;
};

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D outImage;

uvec2 pcg2d(uvec2 v) {
    v = v * 1664525u + 1013904223u;

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v>>16u);

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v>>16u);

    return v;
}

uvec3 pcg3d(uvec3 v) {
    v = v * 1664525u + 1013904223u;

    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;

    v ^= v >> 16u;

    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;

    return v;
}

uvec4 pcg4d(uvec4 v) {
    v = v * 1664525u + 1013904223u;
    
    v.x += v.y*v.w;
    v.y += v.z*v.x;
    v.z += v.x*v.y;
    v.w += v.y*v.z;
    
    v ^= v >> 16u;
    
    v.x += v.y*v.w;
    v.y += v.z*v.x;
    v.z += v.x*v.y;
    v.w += v.y*v.z;
    
    return v;
}

vec2 hash2(uvec2 s) {
	return vec2(pcg2d(s)) * (1.0/float(0xffffffffu));
}

vec3 hash3(uvec2 s) {
	uvec3 u = pcg3d(uvec3(s, s.x ^ s.y));
	return vec3(u) * (1.0/float(0xffffffffu));
}

vec4 hash4(uvec2 s) {
	uvec4 u = pcg4d(uvec4(s, s.x ^ s.y, s.x + s.y));
	return vec4(u) * (1.0/float(0xffffffffu));
}

void main() {
	uvec2 s = gl_GlobalInvocationID.xy + noiseData.seed;
	imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(hash3(s), 0.0));
}
