// Files for virtual filesystem
// Autogenerated by makefile (webserver.mk)
#include "SPWebVirtualFile.h"
namespace STAPPLER_VERSIONIZED stappler::web {

const char * getCompileDate() { return __DATE__ " " __TIME__; }
Time getCompileUnixTime() { return SP_COMPILE_TIME; }

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/js/shell.js 
static VirtualFile
_js_shell_js = VirtualFile::add("/js/shell.js", R"VirtualFile(var KawaiJson = function() {
	var init = false;

	var kawaiJson = {
		ontoggle: function (event) {
			var collapsed, target = event.target;
			if (event.target.className == 'collapser') {
				collapsed = target.parentNode.getElementsByClassName('collapsible')[0];
				if (collapsed.parentNode.classList.contains("collapsed"))
					collapsed.parentNode.classList.remove("collapsed");
				else
					collapsed.parentNode.classList.add("collapsed");
			}
		},
		addslashes: function (str) {
			return (str + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
		},
		recursive: function (parent, json, isLast) {
			var ellipsis = document.createElement('span');
			ellipsis.className = "ellipsis";
			if (Array.isArray(json)) {
				this.addTextNode(parent, '[');
				parent.appendChild(ellipsis);
			}
			else if (typeof json === 'object' && json) {
				this.addTextNode(parent, '{');
				parent.appendChild(ellipsis);
			}

			var ul = document.createElement('ul');
			ul.className = "obj collapsible";
			
			if (json != null) {
				var keys = Object.keys(json);
				for (var keys = Object.keys(json), i = 0, end = keys.length; i < end; i++) {
					var key = keys[i];
					var li = document.createElement('li');
					var keySetted = true;
					if (!isNaN(parseFloat(key)) && isFinite(key)) {
						keySetted = false;
					}
					if (keySetted) {
						var keySpan = document.createElement('span');
						keySpan.className = "property";
						keySpan.innerHTML = '<span class="quote">"</span>' + key + '<span class="quote">"</span>';
						li.appendChild(keySpan);
					}
					var valSpan = document.createElement('span');

					if (typeof json[key] !== 'object' || json[key] == null) {
						if (keySetted)
							this.addTextNode(li, ': ');
						switch (typeof json[key]) {
							case 'boolean':
								valSpan.className = 'type-boolean';
								valSpan.innerHTML = json[key];
								break;
							case 'object':
								valSpan.className = 'type-null';
								valSpan.innerHTML = 'null';
								break;
							case 'number':
								valSpan.className = 'type-number';
								valSpan.innerHTML = json[key];
								break;
							case 'string':
								valSpan.className = 'type-string';
								valSpan.innerHTML = '<span class="quote">"</span>' + this.addslashes(json[key]) + '<span class="quote">"</span>';
								break;
						}
						li.appendChild(valSpan);
						if (i + 1 < end)
							this.addTextNode(li, ',');
						ul.appendChild(li);
					}
					else {
						var collapser = document.createElement('div');
						collapser.className = "collapser";

						if (Array.isArray(json[key])) {
							this.addTextNode(li, ': ');
							li.appendChild(collapser);
							this.recursive(li, json[key], i + 1 >= end);
							ul.appendChild(li);
						}
						else {
							if (keySetted)
								this.addTextNode(li, ': ');
							li.appendChild(collapser);
							this.recursive(li, json[key], i + 1 >= end);
							ul.appendChild(li);
						}

					}
				}

				if (Object.keys(json).length > 0)
					parent.appendChild(ul);
			}

			if (Array.isArray(json)) {
				if (!isLast) {
					this.addTextNode(parent, '],');
				}
				else {
					this.addTextNode(parent, ']');
				}
			}
			else if (typeof json === 'object' && json) {
				if (!isLast) {
					this.addTextNode(parent, '},');
				}
				else {
					this.addTextNode(parent, '}');
				}
			}
		},
		addTextNode: function (parent, text) {
			var el = document.createTextNode(text);
			parent.appendChild(el);
		},
		parse: function (container, json) {
			this.recursive(container, json, true);
		},
	};
	
	return function(container, json) {
		if (init == false) {
			document.body.addEventListener('click', kawaiJson.ontoggle, false);
			init = true;
		}
		kawaiJson.parse(container, json);
	};
}();

function escape(str) {
    var tagsToReplace = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;'
    };
    return str.replace(/[&<>]/g, function(tag) {
        return tagsToReplace[tag] || tag;
    });
};

function upload(file, url, name) {
	var xhr = new XMLHttpRequest();
	var data = new FormData();
	data.append(name, file);

	var output = document.getElementById("output");
	var node = document.createElement("p");
	node = output.insertBefore(node, output.firstChild);
	node.innerHTML = "Upload started";

	xhr.onload = xhr.onerror = function() {
		if (this.status == 200) {
			push(this.response);
		} else {
			push("Upload error: " + this.status);
		}
		output.removeChild(node);
	};

	xhr.upload.onprogress = function(event) {
		node.innerHTML = event.loaded + ' / ' + event.total;
	};

	xhr.open("POST", url, true);
	xhr.send(data);
}

function uploadWithData(data) {
	document.getElementById('fileSelector').click();
}

var ws;
var wsaddress = ((window.location.protocol == "https:") ? "wss:"
		: "ws:")
		+ "//" + window.location.host + window.location.pathname
if ((typeof (WebSocket) == 'undefined')
		&& (typeof (MozWebSocket) != 'undefined')) {
	WebSocket = MozWebSocket;
}
function send(input) {
	if (ws) {
		ws.send(input.value);
		input.value = "";
	}
}

function init(consoleTarget) {
	document.getElementById("main").style.visibility = "hidden";
	ShellHistory(document.getElementById("input"), send);

	var fileUpload = document.getElementById("fileSelector");
	fileUpload.addEventListener("change", function(event) {
		upload(event.target.files[0]);
	}, false);

	wsaddress = wsaddress + consoleTarget;
}

function push(data) {
	var output = document.getElementById("output");
	var node = document.createElement("p");
	if (data[0] == '{' || data[0] == '[') {
		KawaiJson(node, JSON.parse(data));
	} else if (data[0] == '<') {
		node.innerHTML = data;
	} else {
		node.innerHTML = escape(data);
	}
	output.insertBefore(node, output.firstChild);
}

function connect() {
	ws = new WebSocket(wsaddress);
	ws.onopen = function(event) {
		document.getElementById("main").style.visibility = "visible";
		document.getElementById("login").style.display = "none";
		document.getElementById("main").style.display = "block";
		document.getElementById("output").innerHTML = "";
	};
	ws.onmessage = function(event) {
		if (event.data[0] != ':') {
			push(event.data);
		} else if (event.data.startsWith(':upload:')) {
			uploadWithData(JSON.parse(event.data.substr(8)));
		}
	};
	ws.onerror = function(event) {
		console.log(event);
	};
	ws.onclose = function(event) {
		ws = null;
		console.log(event);
		document.getElementById("login").style.display = "block";
		document.getElementById("main").style.display = "none";
	}
	return false;
}

function closeSocket() {
	ws.close();
	return false;
}

function ShellHistory(node, callback) {
	var history = {
		log : [],
		pos : 0
	}

	history["add"] = function(str) {
		history.log[history.log.length] = str;
		history.pos = history.log.length;
	};
	history["next"] = function() {
		if (history.log.length == 0) {
			return "";
		}
		if (history.pos <= 0) {
			history.pos = -1;
			return "";
		}
		history.pos --;
		return history.log[history.pos];
	};
	history["prev"] = function() {
		if (history.log.length == 0) {
			return "";
		}
		if (history.pos >= history.log.length - 1) {
			history.pos = history.log.length;
			return "";
		}
		history.pos ++;
		return history.log[history.pos];
	};

	node.onkeydown = function(ev) {
		if (ev.keyCode == '38') {
			node.value = history.next();
		} else if (ev.keyCode == '40') {
			node.value = history.prev();
		} else if (ev.keyCode == '13') {
			if (node.value != "") {
				history.add(node.value);
				callback(node);
			}
		}
	}
};

function SaveEditorContent(editor) {
	var xhr = new XMLHttpRequest();
	xhr.open("POST", window.location.pathname, true);

	xhr.setRequestHeader("Content-type", "application/markdown");
	
	xhr.onreadystatechange = function() {//Вызывает функцию при смене состояния.
		if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
			var jsonResponse = JSON.parse(xhr.responseText);
			if (jsonResponse.OK) {
				window.location.reload();
			}
		}
	}
	xhr.send(editor.value());
}

var simplemde = null;

function ToggleEditor() {
	var editor = document.getElementById("editblock")
	var source = document.getElementById("sourceblock")
	
	if (SimpleMDE) {
		var editorButtons = [
			"bold", "italic", "heading", "|", "code", "unordered-list", "ordered-list", "|", "link",
			{
				name: "toc",
				action: SimpleMDE.drawHorizontalRule,
				className: "fa fa-list-alt",
				title: "Insert TOC"
			},
			"|",
			{
				name: "save",
				action: function saveContent(editor) {
					SaveEditorContent(editor)
				},
				className: "fa fa-floppy-o",
				title: "Save",
			},
			{
				name: "cancel",
				action: function cancel(editor) {
					var editor = document.getElementById("editblock")
					var source = document.getElementById("sourceblock")
					if (!editor.classList.contains("editorclosed")) {
						editor.classList.add("editorclosed");
						if (simplemde != null) {
							simplemde.toTextArea();
							simplemde = null;
						}
						source.classList.remove("editorclosed");
					}
				},
				className: "fa fa-times",
				title: "Cancel",
			},
		];

		if (editor.classList.contains("editorclosed")) {
			editor.classList.remove("editorclosed");
			if (simplemde == null) {
				simplemde = new SimpleMDE({
					element: document.getElementById("editor"),
					spellChecker: false,
					toolbar: editorButtons,
					insertTexts: {
						horizontalRule: ["{{TOC}}"],
					},
					indentWithTabs: true,
					tabSize: 4,
					renderingConfig: {
						codeSyntaxHighlighting: true
					}
				})
			}
			source.classList.add("editorclosed");
		} else {
			source.classList.remove("editorclosed");
			editor.classList.add("editorclosed");
			if (simplemde != null) {
				simplemde.toTextArea();
				simplemde = null;
			}
		}
	}
	return false;
}

function EditorDownShortcuts(e) {
	if (e.ctrlKey && e.which == 83) {
		e.stopPropagation();
		e.preventDefault();  
		e.returnValue = false;
		e.cancelBubble = true;
		return false;
	}
}

function EditorUpShortcuts(e) {
	if (e.ctrlKey && e.which == 83) {
		if (simplemde != null) {
			SaveEditorContent(simplemde)
		}
		return false;
	} else if (e.ctrlKey && e.which == 69) {
		if (simplemde == null) {
			ToggleEditor()
		}
		return false;
	} else if (e.which == 27) {
		if (simplemde != null) {
			ToggleEditor()
		}
		return false;
	}
}

document.addEventListener('keydown', EditorDownShortcuts);
document.addEventListener('keyup', EditorUpShortcuts);

document.addEventListener('copy', (event) => {
	var data = document.getSelection();
	
	if (data.anchorNode.classList.contains('hljs-ln-line') || data.anchorNode.classList.contains('hljs-ln')) {
		var str = data.toString()
		str = str.replace(/\n\t\n/g, '\n');
		str = str.replace(/\n \n/g, '\n\n');
		
		event.clipboardData.setData('text', str);
		event.preventDefault();
	}
});
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/css/kawaiJson.css 
static VirtualFile
_css_kawaiJson_css = VirtualFile::add("/css/kawaiJson.css", R"VirtualFile(ul {
	list-style-type: none;
	padding: 0px;
	margin: 0px 0px 0px 26px;
}

li {
	position: relative;
}

.hoverable {
	transition: background-color .2s ease-out 0s;
	-webkit-transition: background-color .2s ease-out 0s;
	display: inline-block;
}

.hovered {
	transition-delay: .2s;
	-webkit-transition-delay: .2s;
}

.selected {
	outline-style: solid;
	outline-width: 1px;
	outline-style: dotted;
}

.collapsed>.collapsible {
	display: none;
}

.ellipsis {
	display: none;
}

.collapsed>.ellipsis {
	display: inherit;
}

.collapser {
	position: absolute;
	top: 1px;
	left: -1.5em;
	cursor: default;
	user-select: none;
	-webkit-user-select: none;
}

.status {
	position: fixed;
	left: 0px;
	bottom: 0px;
	min-width: 628px;
	border-color: #c2c2c2;
	border-top-width: 1px;
	border-right-width: 1px;
	border-bottom-width: 0px;
	border-left-width: 0px;
	border-style: solid;
	border-top-right-radius: 4px;
	height: 16px;
	padding-top: 2px;
	padding-bottom: 2px;
	padding-right: 7px;
	padding-left: 4px;
	font-family: sans-serif;
	font-size: 12px;	
	opacity: 0;
	background-color: #d2d2f6;
	color: #696969;
	transition: opacity .2s ease-out;	
	-webkit-transition: opacity .2s ease-out;
	user-select: none;
	-webkit-user-select: none;
}

.status:not(:empty ) {
	opacity: 1;
}

.toolbox {
	font-family: sans-serif;
	font-size: 13px;
	opacity: .25;
	background-color: #d2d2f6;
	position: fixed;
	right: 0px;
	top: 0px;
	border-color: #c2c2c2;
	border-bottom-width: 1px;
	border-left-width: 1px;
	border-top-width: 0px;
	border-right-width: 0px;
	border-style: solid;
	border-bottom-left-radius: 4px;
	padding-bottom: 3px;
	transition: opacity .2s ease-out;
	-webkit-transition: opacity .2s ease-out;
	cursor: default;
	user-select: none;
	-webkit-user-select: none;
	padding-left: 2px;
}

.toolbox:hover {
	opacity: 1;
}

.toolbox>* {
	padding-left: 3px;
	padding-right: 3px;
}

.toolbox>a {
	padding-left: 5px;
}

.toolbox>img {
	height: 14px;
	vertical-align: bottom;
	cursor: pointer;
}

#output {
	white-space: pre;
	font-family: monospace;
}

#output span {
	white-space: pre;
	font-family: monospace;
}

.property {
	font-weight: bold;
}

.type-null {
	color: gray;
}

.type-boolean {
	color: firebrick;
}

.type-number {
	color: blue;
}

.type-string {
	color: green;
}

.callback-function {
	color: gray;
}

.collapser:after {
	content: "-";
}

.collapsed > .collapser:after {
	content: "+";
}

.ellipsis:after {
	content: " … ";
}

.collapsible {
	margin-left: 2em;
}

.hoverable {
	padding-top: 1px;
	padding-bottom: 1px;
	padding-left: 2px;
	padding-right: 2px;
	border-radius: 2px;
}

.hovered {
	background-color: rgba(235, 238, 249, 1);  
}

.collapser {
	padding-right: 6px;
	padding-left: 6px;
}

.property > .quote { opacity: 0 }
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/css/md.css 
static VirtualFile
_css_md_css = VirtualFile::add("/css/md.css", R"VirtualFile(.docs {
	padding: 12px 0;
}

.docs > .contents {
	width: 320px;
	border-left: 1px #ccc solid;
	float: right;
	background: #fff;
}

.docs > .doc {
	margin-right: 320px;
}

.source {
	padding-left: 16px;
	padding-right: 16px;
}

.docs pre {
	margin-top: 0.9rem;
	margin-bottom: 0.9rem;
	padding: 4px;
	background-color: #e0f2f1;
	overflow: scroll;
	-moz-tab-size: 4; /* Firefox */
	tab-size: 4;
}

.docs code {
	color: black;
	background-color: #e0f2f1;
}

.docs p, .docs h4, .docs h5, .docs h6 {
	font-family: "Roboto";
	margin-top: 0.4rem;
	margin-bottom: 0.4rem;
	font-size: 1.1rem;
	line-height: 1.6rem;
	color: #333;
}

.docs li {
	font-family: "Roboto";
	margin: 0.15rem;
	padding: 0.15rem;
}

.docs h1 {
	margin-top: 1.1rem;
	margin-bottom: 0.5rem;
	font-family: "Roboto";
	font-weight: 400;
	font-size: 1.6rem;
	color: #666;
	background-color: #e0f2f1;
}

.docs h2 {
	margin-top: 1.1rem;
	margin-bottom: 0.5rem;
	font-family: "Roboto";
	font-weight: 500;
	font-size: 1.4rem;
	color: #333;
	background-color: #e0f2f1;
}
.docs h3 {
	margin-top: 1.1rem;
	margin-bottom: 0.5rem;
	font-family: "Roboto";
	font-weight: 500;
	font-size: 1.3rem;
	color: #666;
	background-color: #e0f2f1;
}

.docs .contents h1 {
	font-size: 1.3rem;
	color: #999;
}

.docs .contents h2 {
	font-size: 1.2rem;
	color: #999;
}

.source a {
	margin: 0;
}

/* for block of numbers */
.hljs-ln-numbers {
    user-select: none;
    text-align: center;
    color: #ccc;
    border-right: 1px solid #CCC;
    vertical-align: top;
	padding-right: 0.3rem !important;
    /* your custom style here */
}

.hljs-ln-code .hljs-ln-line {
	user-select: text;
}

table.hljs-ln {
	user-select: none;
})VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/css/style.css 
static VirtualFile
_css_style_css = VirtualFile::add("/css/style.css", R"VirtualFile(html {
	font-size: 18px;
}

body {
	background: #aaa;
	margin: 0;
	padding: 0;
}

h6.components {
	font-family: "Roboto";
	margin: 0;
	padding: 0 0 0 1rem;
	font-weigth: bold;
	font-size: 0.9rem;
	color: #999;
}

span {
	font-family: "Roboto";
}

span.method {
	font-weight: bold;
	color: #666;
}

span.pattern {
	font-family: "monospace";
	color: #333;
}

.body {
	margin: 1% auto;
	padding: 4px;
	max-width: 1380px;
	width: 98%;
	background: #fff;
	box-shadow: 0 2px 8px #666;
}

.title {
	margin: 16px;
	border-bottom: 1px #ccc solid;
	display: flex;
	justify-content: space-between;
}

.title > h1 {
	font-family: "Roboto";
	font-size: 1.2rem;
	margin: 0;
	padding: 0;
	font-weight: 300;
}

.title > h1 > span.name {
	font-weight: 500;
}

.title > p.nav {
	text-align: right;
	font-family: "Roboto";
	font-size: 1.2rem;
	margin: 0;
	padding: 0;
}

a {
	font-family: "Roboto";
	margin: 6px;
	color: #00bfa5ff;
	font-weight: 500;
	font-size: 1.1rem;
}

.title > p.nav > span.id {
	color: #999;
}

.main {
	margin: 16px;
}

.main > form#setup > input {
	width: 160px;
	display: block;
	margin: 4px auto;
	padding: 0;
}

div.map {
	padding-left: 2rem;
}

div.map > p.components {
	padding: 0;
	margin: 0;
}

p.components > span.component {
	font-family: "Roboto";
	display: inline-block;
	background-color: #64ffda;
	outline: 1px #00bfa5 solid;
	padding: 2px 6px;
	margin: 4px;
}

p.components span.version {
	color: #999;
}

p.components > span.db {
	background-color: #ffd180;
	outline: 1px #e65100 solid;
}

p.components > span.root {
	background-color: #ea80fc;
	outline: 1px #6a1b9a solid;
}
p.components > span.rootserver {
	background-color: #eee;
	outline: 1px #999 solid;
}
p.components > span.map {
	background-color: #ccc;
	outline: 1px #999 solid;
}

p.components > span.scheme {
	background-color: #8c9eff;
	outline: 1px #304ffe solid;
}

#output p {
	margin: 0;
	padding: 0;
	white-space: pre-wrap;
}

.content {
	width: 99%;
	height: 1600px;
	padding-left: 10px;
	white-space: pre-wrap;
	font-family: monospace;
	-moz-tab-size: 4;
}

.key { font-weight: bold }
.bool,.integer,.float { color: blue }
.string,.bytes { color: green }
.null { color: red }
.key > .quote { opacity: 0 }

.actions { }

.delete {
	color: white;
	background: #d50000
}

.edit {
	color: white;
	background: #303f9f
}

.edit,.delete {
	opacity: 0.4;
	line-height: 3em;
	padding: 0.5em;
	text-decoration: none;
	border-radius: 0.5em;
	box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5);
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	-webkit-touch-callout: none;
}

.edit:hover,.delete:hover { opacity: 1.0 }
.error { color: red }

pre {
	margin: 0;
	padding: 0;
}

.code {
	font-family: monospace;
	margin: 0;
	padding: 0;
	-moz-tab-size: 4;
}

span.time {
	font-family: monospace;
	color: gray;
}

span.ip {
	font-family: monospace;
	color: blue;
}

span.server {
	font-weight: bold;
}

.headers {
	margin: 4px 0;
	overflow-x: scroll;
	background-color: #ddd;
}

.data {
	margin: 4px 0;
	overflow-x: scroll;
	background-color: #a7ffeb;
}
p.editbutton {
	text-align: right;
}
p.editbutton > a {
	font-size: 0.8rem;
}
.editorclosed {
	display: none;
}
.CodeMirror, .CodeMirror-scroll {
	min-height: 200px;
}
a.selected:before {
  content: "< ";
}
a.selected:after {
  content: " >";
}

form input[type=submit] {
	outline:none;
	border:none;
	text-transform: uppercase;
	background-color: #607d8b;
	padding: 6px 12px;
	color: white;
}

form input[type=text] {
	width: 140px;
	display: inline;
}

form input {
	display: block;
	padding: 2px 0;
	margin: 4px;
	border: none;
	border-bottom: 2px solid #bbb;
}

form {
	background-color: #e0f2f1;
	padding: 4px;
	margin: 4px;
}
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/components.pug 
static VirtualFile
_html_components_pug = VirtualFile::add("/html/components.pug", R"VirtualFile(mixin components
	p.components
		if root
			span.component.root= "Root: " + root
		if dbName
			span.component.db= "Database: " + dbName
		if components
			each c in components
				span.component
					span.name=c.name
					|
					|
					span.version=c.version
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/docs.pug 
static VirtualFile
_html_docs_pug = VirtualFile::add("/html/docs.pug", R"VirtualFile(include virtual://html/header.pug

doctype html
head
	title Serenity Documentation
	if virtual
		link(rel="stylesheet",href="/__server/virtual/css/style.css")
		link(rel="stylesheet",href="/__server/virtual/css/md.css")
	else
		link(rel="stylesheet",href="/css/style.css")
		link(rel="stylesheet",href="/css/md.css")
	link(rel="stylesheet",type="text/css",href="https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
	link(rel="stylesheet",href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css")
	link(rel="stylesheet",href="https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css")
	link(rel="stylesheet",href="https://use.fontawesome.com/releases/v5.0.13/css/all.css")
	script(src="https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js")
	script(src="https://cdn.jsdelivr.net/npm/highlightjs-line-numbers.js@2.6.0/dist/highlightjs-line-numbers.min.js")
	script(src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js")
	if virtual
		script(src="/__server/virtual/js/shell.js")
	else
		script(src="/js/shell.js")
	script.
		hljs.initHighlightingOnLoad();
		hljs.initLineNumbersOnLoad();

.body
	+header("Docs")
	.main
		.docs
			.contents
				if breadcrumbs
					each val, key in breadcrumbs
						p.breadcrumbs(style="margin-top: 0; margin-bottom: 0; margin-left: " + (1.0 + 1.0 * key) + "rem;")
							a.breadcrumbs(style="font-size: 1.0rem; font-weight: 400;",href=val.Url)=val.Title
				if root
					p: a(href=root) ↑ Move up
				if contents
					.source!= contents
				if editable
					form(method="POST",action=window.location.pathname+"?createArticle")
						input(name="name",type="text",placeholder="Name")
						input(name="title",type="text",placeholder="Title")
						input(type="submit",value="Create article")
					form(method="POST",action=window.location.pathname+"?createCategory")
						input(name="name",type="text",placeholder="Name")
						input(name="title",type="text",placeholder="Title")
						input(type="submit",value="Create category")
				if isSource
					h1(style="margin-left: 0.5rem") Source code browser
					if dir.back
						div
							a(href=dir.back)
								span(class="fas fa-level-up-alt")
								span= " .."
					each val in dir.dirs
						div
							a(href=val.url)
								span(class="fas fa-folder")
								span= " " + val.name
					each val in dir.files
						div
							a(href=val.url)
								span(class="fas fa-file-alt")
								span= " " + val.name
			.doc
				if editable
					.editblock(style="margin-top: -0.5rem;margin-bottom: -0.5rem")
						p.editbutton(style="margin: 0")
							a(href="#editblock",onclick="return ToggleEditor()") Edit ✎
							a.null(href="?delete")= (isCategory?"Delete category":"Delete article")
						#editblock.editorclosed
							textarea(id="editor",style="display:none;")= mdsource
				if source
					#sourceblock.source!= source
				elseif isSource
					#sourceblock.source
						h1= title
						if isDir
							if dir.back
								div
									a(href=dir.back)
										span(class="fas fa-level-up-alt")
										span= " .."
							each val in dir.dirs
								div
									a(href=val.url)
										span(class="fas fa-folder")
										span= " " + val.name
							each val in dir.files
								div
									a(href=val.url)
										span(class="fas fa-file-alt")
										span= " " + val.name
						else
							pre(class=sourceClass): code(class=sourceClass)= mdsource
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/errors.pug 
static VirtualFile
_html_errors_pug = VirtualFile::add("/html/errors.pug", R"VirtualFile(include virtual://html/header.pug

mixin cursor(front=false)
	p(id=front?"cursor":null)
		if cursor.prev
			- var prevUrl = window.location.pathname+"?c="+cursor.prev
			if selectedTag
				- prevUrl = prevUrl + "&tag=" + selectedTag
			- prevUrl = prevUrl + "#cursor"
			a.nav(href=prevUrl) Prev
			|
			|
		span= cursor.start + " - " + cursor.end + " из " + cursor.total
		if cursor.next
			|
			|
			- var nextUrl = window.location.pathname+"?c="+cursor.next
			if selectedTag
				- nextUrl = nextUrl + "&tag=" + selectedTag
			- nextUrl = nextUrl + "#cursor"
			a.nav(href=nextUrl) Next

mixin deleteLink(id)
	- var link = "?delete="+id
	if cursor.current
		- link = link + "&c="+cursor.current
	if selectedTag
		- link = link + "&tag="+selectedTag
	a.error(href=link) Remove

doctype html
head
	title Serenity Errors Page
	link(rel="stylesheet",href="/__server/virtual/css/style.css")
	link(rel="stylesheet",type="text/css",href="https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
	script(src="/__server/virtual/js/shell.js")

.body
	+header("Errors")
	.main
		if tags
			p#tags
				each val in tags
					|
					|
					a(href="?tag="+val.tag,class=val.selected?"selected":null)= "#" + val.tag + " (" + val.count + ")"

		+cursor(true)

		each val in errors
			div.error_item
				p.header
					span.
						[#[span.time= "#" + val.__oid]] [#[span.time= serenity.timeToHttp(val.time)]] [#[span.ip= val.ip]] #[span.server= val.name] #[span.request= val.request]
					|
					|
					+deleteLink(val.__oid)
					|
					|
					if val.tags
						span &nbsp;&nbsp;
						each val in val.tags
							|
							|
							a(href="?tag="+val)= "#" + val
				.headers
					each value, key in val.headers
						p.code #[= key]: #[= value]
				.data
					pre: code.code= serenity.prettify(val.data)
		else
			p No errors found

		+cursor
			)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/errors_unauthorized.pug 
static VirtualFile
_html_errors_unauthorized_pug = VirtualFile::add("/html/errors_unauthorized.pug", R"VirtualFile(include virtual://html/header.pug

doctype html
html
	head
		title Serenity Errors Page
		link(rel="stylesheet",href="/__server/virtual/css/style.css")
		link(rel="stylesheet",type="text/css",href="http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
		script(src="/__server/virtual/js/shell.js")
	body
		.body
			+header("Unauthorized")
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/handlers.pug 
static VirtualFile
_html_handlers_pug = VirtualFile::add("/html/handlers.pug", R"VirtualFile(include virtual://html/components.pug
include virtual://html/header.pug

doctype html
head
	title Serenity Handlers Page
	link(rel="stylesheet",href="/__server/virtual/css/style.css")
	link(rel="stylesheet",type="text/css",href="https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
	script(src="/__server/virtual/js/shell.js")
.body
	+header("Handlers")
	.main
		+components
		.handlers
			each value in handlers
				p.components
					span.handler_name= value.name
					if value.forSubPaths
						span.version= " (with subpaths)"
					span= " : "
					if value.server
						span.component.rootserver
							span.name Server
					else
						span.component
							span.name= value.component
					if value.scheme
						span.component.scheme= "Scheme: " + value.scheme
				if value.map
					.map
						each m in value.map
							p.components
								span.method= m.method + " "
								span.pattern= m.pattern + " : "
								span.version= m.name
							if m.query
								h6.components Query fields
								.map
									each f in m.query
										p.components
											span.pattern= f.type + " "
											span.method= f.name
											if f.documentation
												span.version= " - " + f.documentation
							if m.input
								h6.components Input fields
								.map
									each f in m.input
										p.components
											span.pattern= f.type + " "
											span.method= f.name
											if f.documentation
												span.version= " - " + f.documentation
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/header.pug 
static VirtualFile
_html_header_pug = VirtualFile::add("/html/header.pug", R"VirtualFile(mixin header(name)
	.title
		h1
			span.name= name
			span.id= ": Serenity " + version
		p.nav
			if hasDb && setup && auth
				a(href="/__server") Server
				|
				|
				a(href="/__server/handlers") Handlers
				|
				|
				a(href="/__server/docs/index") Docs
				|
				|
				a(href="/__server/errors") Errors
				|
				|
				a(href="/__server/reports") Reports
			else if hasDb && !setup
				span Waiting for setup
			else if !hasDb
				span No db connection
		if setup
			p.nav
				if auth
					span.id= "#" + auth.id
					span= " " + auth.name + " "
					if auth.cancel
						a(href=auth.cancel) (Exit)
				else
					a(href=window.location.pathname+"?auth") Not authorized
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/reports.pug 
static VirtualFile
_html_reports_pug = VirtualFile::add("/html/reports.pug", R"VirtualFile(include virtual://html/components.pug
include virtual://html/header.pug

doctype html
head
	title Serenity Handlers Page
	link(rel="stylesheet",href="/__server/virtual/css/style.css")
	link(rel="stylesheet",type="text/css",href="https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
	script(src="/__server/virtual/js/shell.js")

.body
	+header("Reports")
	.main
		+components
		.handlers
			if files
				each value in files
					p.components(id=value.name)
						span.time= "[" + value.date + "]"
						|
						|
						a(href="/__server/reports/" + value.name)
							span.handler_name= value.name
						|
						|
						a.null(href="/__server/reports/" + value.name + "?remove") Remove
			else if file
				p.components
				
					a(href="/__server/reports#" + file.name) < Back
					|
					|
					span.time= "[" + file.date + "]"
					|
					|
					span.handler_name= file.name
					|
					|
					a.null(href="/__server/reports/" + file.name + "?remove") Remove
				.data
					pre: code.code= file.data
)VirtualFile");

// /home/sbkarr/stappler/libstappler-root/extra/webserver/webserver/virtual/html/server.pug 
static VirtualFile
_html_server_pug = VirtualFile::add("/html/server.pug", R"VirtualFile(include virtual://html/components.pug
include virtual://html/header.pug

doctype html
head
	title Serenity Server Page
	link(rel="stylesheet",href="/__server/virtual/css/style.css")
	link(rel="stylesheet",href="/__server/virtual/css/kawaiJson.css")
	link(rel="stylesheet",type="text/css",href="https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900italic,900")
	script(src="/__server/virtual/js/shell.js")
body(onload="init(\"/shell\");")
	.body
		+header("Server")
		.main
			if setup && auth
				+components
				div.console
					#login
						button(onclick="return connect();") Run server console
						pre: code= resStat + memStat
					#main(style="visibility:hidden")
						input#input(type="text",name="message",value="",size="80")
						button(onclick="return closeSocket();") Close
						br
						#output
					input#fileSelector(type="file",style="visibility:hidden")
			else if !setup
				form#setup(method="post")
					input#name(type="text",name="name",placeholder="User name",value="")
					input#passwd(type="password",name="passwd",placeholder="Password",value="")
					input(type="submit",value="Setup")
)VirtualFile");}
